/*
For a 10x10 matrix where a 1 represents land and a 0 represents water, find the total number of independent islands by finding the total number of interconnected 1's

INPUT:
1 0 1 0 0 0 1 1 1 1
0 0 1 0 1 0 1 0 0 0 
1 1 1 1 0 0 1 0 0 0 
1 0 0 1 0 1 0 0 0 0 
1 1 1 1 0 0 0 1 1 1 
0 1 0 1 0 0 1 1 1 1 
0 0 0 0 0 1 1 1 0 0 
0 0 0 1 0 0 1 1 1 0 
1 0 1 0 1 0 0 1 0 0 
1 1 1 1 0 0 0 1 1 1 

*/

#include <iostream>
#include<queue>

using namespace std;

class Graph {
private:
	int rows;
	int cols;
	int islandCounter;
	int** inputMat;
	char** outputMat;
	bool** isVisited;
public:
	Graph(int rows, int cols) {
		this->rows = rows;
		this->cols = cols;
		islandCounter = 0;
		outputMat = new char* [rows];
		isVisited = new bool* [rows];
		inputMat = new int* [rows];

		for (int i = 0; i < rows; i++) {
			outputMat[i] = new char[cols];
			isVisited[i] = new bool[cols];
			inputMat[i] = new int[cols];
			for (int j = 0; j < cols; j++) {
				outputMat[i][j] = 219;
				isVisited[i][j] = false;
				inputMat[i][j] = INT_MIN;
			}
		}
	}
	void add(int num) {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (inputMat[i][j] == INT_MIN) {
					inputMat[i][j] = num;
					return;
				}
			}
		}
	}
	void printInputMat() {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				cout << inputMat[i][j] << " ";
			}
			cout << endl;
		}
	}
	void printOutputMat() {
		cout << endl;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				cout << outputMat[i][j] << " ";
			}
			cout << endl;
		}
	}
	bool isInGrid(int row, int col) {
		if (0 <= row && row < rows && 0 <= col && col < cols) {
			return true;
		}
		return false;
	}
	void BFS(int rootRow, int rootCol) {
		//create unexplored queue, insert home point
		queue<pair<int, int>> unexplored;
		unexplored.push(make_pair(rootRow, rootCol));

		//update islandCounter
		islandCounter++;

		while (!unexplored.empty()) {
			queue<pair<int, int>> currentWave;
			swap(currentWave, unexplored);

			while (!currentWave.empty()) {
				//pop front node, mark it as visited
				pair<int, int> currentPos = currentWave.front();
				currentWave.pop();

				isVisited[currentPos.first][currentPos.second] = true;

				//marking its grouping num on outputMat
				outputMat[currentPos.first][currentPos.second] = islandCounter+48;

				//nbr vectors
				int nbrRow[] = { -1,-1,-1,0,0,1,1,1 };
				int nbrCol[] = { -1,0,1,-1,1,-1,0,1 };

				//look at all nbrs
				for (int i = 0; i < 8; i++) {
					int possRow = currentPos.first + nbrRow[i];
					int possCol = currentPos.second + nbrCol[i];

					//is it inGrid?
					bool inGrid = isInGrid(possRow, possCol);
					if (inGrid) {
						//is it an island? Has it been visited?
						if (inputMat[possRow][possCol] == 1 && isVisited[possRow][possCol] == false) {
							unexplored.push(make_pair(possRow, possCol));
						}
					}
				}
			}
		}
	}
	void BFSWholeGrid() {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (inputMat[i][j] == 1 && isVisited[i][j]==false)
					BFS(i, j);
			}
		}
	}
};

int main() {
	int num;
	Graph* g = new Graph(10,10);
	for (int i = 0; i < 100; i++) {
		cin >> num;
		g->add(num);
	}
	g->BFSWholeGrid();
	g->printOutputMat();


}
